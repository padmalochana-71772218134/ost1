Primary constructor:

// Define a class with a primary constructor
class Person(val name: String, val age: Int) {
  
  // Class body
  def greet(): Unit = {
    println(s"Hello, my name is $name and I am $age years old.")
  }
}

// Main object
object Main {
  def main(args: Array[String]): Unit = {
    // Create an instance of the class
    val person = new Person("Sowmyasree", 20)
    // Call a method on the instance
    person.greet()
  }
}

Auxilary:

// Class definition with a primary constructor
class Person(val name: String, val age: Int) {
  
  // Auxiliary constructor
  def this(name: String) = {
    this(name, 0) // Calls the primary constructor with a default age of 0
    println(s"Auxiliary constructor called for $name")
  }

  // Method to display information
  def displayInfo(): Unit = {
    println(s"Name: $name, Age: $age")
  }
}

object MainApp {
  def main(args: Array[String]): Unit = {
    // Create object using the primary constructor
    val person1 = new Person("Alice", 25)
    person1.displayInfo()

    // Create object using the auxiliary constructor
    val person2 = new Person("Bob")
    person2.displayInfo()
  }
}

Companion object:

// Define a class
class Person(val name: String) {
  def greet(): Unit = {
    println(s"Hello, my name is $name.")
  }
}

// Define the companion object
object Person {
  def apply(name: String): Person = new Person(name)
}

// Main object to run the program
object SimpleCompanionObjectDemo {
  def main(args: Array[String]): Unit = {
    // Create an instance using the companion object
    val person = Person("Alice")
    person.greet()
  }
} 

traits:

// Abstract class
abstract class Animal {
  // Abstract method
  def sound(): Unit
}

// Subclass implementing the abstract class
class Dog extends Animal {
  override def sound(): Unit = {
    println("Woof! Woof!")
  }
}

// Main object to run the program
object SimpleAbstractClassDemo {
  def main(args: Array[String]): Unit = {
    val dog = new Dog()
    dog.sound()
  }
}

Abstract:

// Abstract class
abstract class Animal {
  // Abstract method
  def sound(): Unit
}

// Subclass implementing the abstract class
class Dog extends Animal {
  override def sound(): Unit = {
    println("Woof! Woof!")
  }
}

// Main object to run the program
object SimpleAbstractClassDemo {
  def main(args: Array[String]): Unit = {
    val dog = new Dog()
    dog.sound()
  }
} 

Singleton objects:

object SingletonObject {
  def addNumbers(x: Int, y: Int): Int = x + y
}

object MainApp {
  def main(args: Array[String]): Unit = {
    // Directly calling addNumbers via the singleton object
    val sum = SingletonObject.addNumbers(5, 10)
    println(s"The sum is: $sum") // No instantiation involved here
  }
}
